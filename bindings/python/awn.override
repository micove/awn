%%
headers
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include <pycairo.h>
#ifdef USE_GCONF
#include <gconf/gconf-value.h>
#endif
#include <libawn/awn-applet.h>
#include <libawn/awn-applet-dialog.h>
#include <libawn/awn-applet-simple.h>
#include <libawn/awn-cairo-utils.h>
#include <libawn/awn-config-client.h>
#include <libawn/awn-defines.h>
#include <libawn/awn-effects.h>
#include <libawn/awn-enum-types.h>
#include <libawn/awn-plug.h>
#include <libawn/awn-title.h>
#include <libawn/awn-desktop-item.h>
#include <libawn/awn-vfs.h>
extern Pycairo_CAPI_t *Pycairo_CAPI;

static GSList *
_pysequence_to_gslist (PyObject *seq, AwnConfigListType list_type)
{
  GSList *list = NULL;

  int i;
  int len = PySequence_Length (seq);
  for (i = 0; i < len; i++) {
    PyObject *item = PySequence_GetItem (seq, i);
    Py_DECREF(item);
    switch (list_type) {
      case AWN_CONFIG_CLIENT_LIST_TYPE_BOOL: {
        gboolean *data = g_malloc (sizeof (gboolean));
        *data = (gboolean)PyInt_AsLong (item);
        list = g_slist_append (list, data);
        break;
      } case AWN_CONFIG_CLIENT_LIST_TYPE_FLOAT: {
        gdouble *data = g_malloc (sizeof (gdouble));
        *data = (gdouble)PyFloat_AsDouble (item);
        list = g_slist_append (list, data);
        break;
      } case AWN_CONFIG_CLIENT_LIST_TYPE_INT: {
        gint *data = g_malloc (sizeof (gint));
        *data = (gint)PyInt_AsLong (item);
        list = g_slist_append (list, data);
        break;
      } case AWN_CONFIG_CLIENT_LIST_TYPE_STRING: {
        gchar *data = g_strdup (PyString_AsString (item));
        list = g_slist_append (list, data);
        break;
      }
    }
  }
  return list;
}
static PyObject *
_gslist_to_pylist (GSList *list, AwnConfigListType list_type) {
  PyObject *py_list;
  guint i;
  gsize slist_len = g_slist_length (list);
  py_list = PyList_New ((Py_ssize_t)slist_len);

  for (i = 0; i < slist_len; i++) {
    PyObject *py_data;
    gpointer data = g_slist_nth_data (list, i);
    if (data) {
      switch (list_type) {
        case AWN_CONFIG_CLIENT_LIST_TYPE_BOOL:
          py_data = PyBool_FromLong (*((gboolean*)data));
          break;
        case AWN_CONFIG_CLIENT_LIST_TYPE_FLOAT:
          py_data = PyFloat_FromDouble (*((gdouble*)data));
          break;
        case AWN_CONFIG_CLIENT_LIST_TYPE_INT:
          py_data = PyInt_FromLong (*((gint*)data));
          break;
        case AWN_CONFIG_CLIENT_LIST_TYPE_STRING:
          py_data = PyString_FromString ((gchar*)data);
          break;
      }
      if (PyList_SetItem (py_list, i, py_data) == -1) {
        PyErr_SetString (PyExc_ValueError, "Could not populate the list with the configuration value.");
        return NULL;
      }
    }
  }
  return py_list;
}
%%
modulename awn
%%
import gobject.GObject as PyGObject_Type
import gtk.Dialog as PyGtkDialog_Type
import gtk.EventBox as PyGtkEventBox_Type
import gtk.HBox as PyGtkHBox_Type
import gtk.IconTheme as PyGtkIconTheme_Type
import gtk.Plug as PyGtkPlug_Type
import gtk.Socket as PyGtkSocket_Type
import gtk.VBox as PyGtkVBox_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Window as PyGtkWindow_Type
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type
%%
ignore-glob
  *_get_type
%%
override awn_config_client_new kwargs
static int
_wrap_awn_config_client_new (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
  static char *kwlist[] = { "name", "uid", NULL };
  gchar *name = NULL;
  gchar *uid = NULL;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs,"|ss:AwnConfigClient.__init__", kwlist, &name, &uid)) {
    return -1;
  }
  self->gtype = AWN_TYPE_CONFIG_CLIENT;
  self->free_on_dealloc = FALSE;
  if (name) {
    if (!uid) {
      PyErr_SetString (PyExc_ValueError, "The uid argument needs to be defined if the name argument is defined");
      return -1;
    }
    self->boxed = awn_config_client_new_for_applet (name, uid);
  } else {
    self->boxed = awn_config_client_new ();
  }

  if (!self->boxed) {
    PyErr_SetString (PyExc_RuntimeError, "could not create AwnConfigClient object");
    return -1;
  }
  self->free_on_dealloc = TRUE;
  return 0;
}
%%
override awn_config_client_get_list kwargs
static PyObject *
_wrap_awn_config_client_get_list (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
  static char *kwlist[] = { "group", "key", "list_type", NULL };
  char *group, *key;
  AwnConfigListType list_type;
  GSList *ret = NULL;
  GError *opt_error = NULL;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs, "ssi:AwnConfigClient.get_list", kwlist, &group, &key, &list_type)) {
    return NULL;
  }

  ret = awn_config_client_get_list (pyg_boxed_get (self, AwnConfigClient), group, key, list_type, &opt_error);

  if (pyg_error_check (&opt_error)) {
    return NULL;
  }

  return _gslist_to_pylist (ret, list_type);
}
%%
override awn_config_client_set_list kwargs
static PyObject *
_wrap_awn_config_client_set_list (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
  static char *kwlist[] = { "group", "key", "list_type", "value", NULL };
  char *group, *key;
  AwnConfigListType list_type;
  PyObject *py_list;
  GSList *the_list = NULL;
  GError *opt_error = NULL;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs, "ssiO:AwnConfigClient.set_list", kwlist, &group, &key, &list_type, &py_list)) {
    return NULL;
  }

  if (!PyList_Check (py_list) && !PyTuple_Check (py_list)) {
    PyErr_SetString (PyExc_TypeError, "Fourth argument not a tuple or list");
    return NULL;
  }
  the_list = _pysequence_to_gslist (py_list, list_type);

  awn_config_client_set_list (pyg_boxed_get (self, AwnConfigClient), group, key, list_type, the_list, &opt_error);

  g_slist_foreach (the_list, (GFunc)g_free, NULL);
  g_slist_free (the_list);

  if (pyg_error_check (&opt_error)) {
    return NULL;
  }

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override awn_applet_simple_set_temp_icon kwargs
static PyObject *
_wrap_awn_applet_simple_set_temp_icon (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    return _wrap_awn_applet_simple_set_icon (self, args, kwargs);
}
%%
override awn_config_client_notify_add kwargs
/* Borrowed from gnome-python/trunk/gconf/gconf.override, r585 */
void
pyawn_config_client_notify_add (AwnConfigClientNotifyEntry *entry, PyObject *tuple)
{
    PyObject *func;
    PyObject *userdata = NULL;
    PyObject *notify_entry;
    PyObject *value;
    PyObject *ret;
    PyGILState_STATE state;

    state = pyg_gil_state_ensure ();

    g_assert (PyTuple_Check (tuple));
    func = PyTuple_GetItem (tuple, 0);
    userdata = PyTuple_GetItem (tuple, 1);

    /* build the AwnConfigClientNotifyEntry python equivalent manually, as a dictionary */
    notify_entry = PyDict_New ();
    PyDict_SetItemString (notify_entry, "client", pyg_boxed_new (AWN_TYPE_CONFIG_CLIENT, entry->client, TRUE, TRUE));
    PyDict_SetItemString (notify_entry, "group", PyString_FromString (entry->group));
    PyDict_SetItemString (notify_entry, "key", PyString_FromString (entry->key));
    switch (awn_config_client_get_value_type (entry->client, entry->group, entry->key, NULL)) {
        case AWN_CONFIG_VALUE_TYPE_BOOL:
            value = PyBool_FromLong (entry->value.bool_val);
            break;
        case AWN_CONFIG_VALUE_TYPE_FLOAT:
            value = PyFloat_FromDouble (entry->value.float_val);
            break;
        case AWN_CONFIG_VALUE_TYPE_INT:
            value = PyInt_FromLong (entry->value.int_val);
            break;
        case AWN_CONFIG_VALUE_TYPE_STRING:
            value = PyString_FromString (entry->value.str_val);
            break;
        case AWN_CONFIG_VALUE_TYPE_LIST_BOOL:
            value = _gslist_to_pylist (entry->value.list_val, AWN_CONFIG_CLIENT_LIST_TYPE_BOOL);
            break;
        case AWN_CONFIG_VALUE_TYPE_LIST_FLOAT:
            value = _gslist_to_pylist (entry->value.list_val, AWN_CONFIG_CLIENT_LIST_TYPE_FLOAT);
            break;
        case AWN_CONFIG_VALUE_TYPE_LIST_INT:
            value = _gslist_to_pylist (entry->value.list_val, AWN_CONFIG_CLIENT_LIST_TYPE_INT);
            break;
        case AWN_CONFIG_VALUE_TYPE_LIST_STRING:
            value = _gslist_to_pylist (entry->value.list_val, AWN_CONFIG_CLIENT_LIST_TYPE_STRING);
            break;
        default:
            PyErr_Format (PyExc_ValueError, "Could not determine the value type of the configuration key '[%s]%s'.", entry->group, entry->key);
            return;
            break;
    }
    PyDict_SetItemString (notify_entry, "value", value);

    if (!userdata) {
        ret = PyObject_CallFunction (func, "N",  notify_entry);
    } else {
        ret = PyObject_CallFunction (func, "NO", notify_entry, userdata);
    }

    if (ret == NULL) {
            PyErr_Print ();
    } else {
            Py_DECREF (ret);
    }

    pyg_gil_state_release (state);
}

static PyObject *
_wrap_awn_config_client_notify_add (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "group", "key", "func",  "user_data", NULL };
    gchar *group;
    gchar *key;
    PyObject *callback;
    PyObject *extra = NULL;
    PyObject *data;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                      "ssO|O:AwnConfigClient.notify_add",
                                      kwlist, &group, &key,
                                      &callback, &extra)) {
        return NULL;
    }

    if (!PyCallable_Check (callback)) {
        PyErr_SetString (PyExc_TypeError, "Third argument not callable");
        return NULL;
    }

    if (extra) {
        Py_INCREF (extra);
    } else {
        extra = PyTuple_New (0);
    }

    data = Py_BuildValue ("(ON)", callback, extra);

    awn_config_client_notify_add (pyg_boxed_get(self, AwnConfigClient),
                                  group, key,
                                  (AwnConfigClientNotifyFunc)pyawn_config_client_notify_add,
                                  data);

    Py_INCREF (Py_None);
    return Py_None;
}
%%
override awn_desktop_item_launch kwargs
static PyObject *
_wrap_awn_desktop_item_launch (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "documents", NULL };
    PyObject *py_documents = NULL;
    GSList *documents = NULL;
    GError *opt_error = NULL;
    gint pid;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "|O:AwnDesktopItem.launch", kwlist, &py_documents)) {
        return NULL;
    }

    if (py_documents) {
        if (PyList_Check (py_documents) || PyTuple_Check (py_documents)) {
            /* abuse the utility function */
            documents = _pysequence_to_gslist (py_documents, AWN_CONFIG_CLIENT_LIST_TYPE_STRING);
        } else if (PyString_Check (py_documents)) {
            /* only one argument */
            documents = g_slist_append (documents, PyString_AsString (py_documents));
        } else {
            PyErr_SetString (PyExc_TypeError, "Argument is not a sequence");
            return NULL;
        }
    }

    pid = awn_desktop_item_launch (pyg_boxed_get (self, AwnDesktopItem), documents, &opt_error);

    if (pyg_error_check (&opt_error)) {
        return NULL;
    }

    return PyInt_FromLong (pid);
}
%%
override awn_cairo_string_to_color kwargs
static PyObject *
_wrap_awn_cairo_string_to_color (PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "color_string", NULL };

    const gchar *color_string;
    AwnColor *color = g_malloc (sizeof (AwnColor));
    PyObject *color_dict;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "s:cairo_string_to_color", kwlist, &color_string)) {
        return NULL;
    }

    awn_cairo_string_to_color (color_string, color);

    color_dict = PyDict_New ();
    PyDict_SetItemString (color_dict, "red", PyFloat_FromDouble (color->red));
    PyDict_SetItemString (color_dict, "green", PyFloat_FromDouble (color->green));
    PyDict_SetItemString (color_dict, "blue", PyFloat_FromDouble (color->blue));
    PyDict_SetItemString (color_dict, "alpha", PyFloat_FromDouble (color->alpha));

    g_free (color);

    return color_dict;
}
%%
override awn_config_client_key_lock_open kwargs
static PyObject *
_wrap_awn_config_client_key_lock_open(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "group", "key", NULL };
    char *group, *key;
    int ret;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,"ss:AwnConfigClient.lock_open", kwlist, &group, &key))
        return NULL;
    
    ret = awn_config_client_key_lock_open (group, key);
    
    return PyInt_FromLong (ret);
}
%%
override awn_config_client_key_lock kwargs
static PyObject *
_wrap_awn_config_client_key_lock (PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "fd", "operation", NULL };
    int fd, operation, ret;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,"ii:AwnConfigClient.lock", kwlist, &fd, &operation))
        return NULL;
    
    ret = awn_config_client_key_lock (fd, operation);

    if (ret != 0) {
        return PyErr_SetFromErrno(PyExc_IOError);
    }
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override awn_config_client_key_lock_close kwargs
static PyObject *
_wrap_awn_config_client_key_lock_close (PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "fd", NULL };
    int fd, ret;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,"i:AwnConfigClient.lock_close", kwlist, &fd))
        return NULL;
    
    ret = awn_config_client_key_lock_close (fd);

    if (ret != 0) {
        return PyErr_SetFromErrno(PyExc_IOError);
    }
    
    Py_INCREF(Py_None);
    return Py_None;
}
