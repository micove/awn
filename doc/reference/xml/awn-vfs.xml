<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libawn-awn-vfs">
<refmeta>
<refentrytitle role="top_of_page">awn-vfs</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBAWN Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>awn-vfs</refname>
<refpurpose>VFS-related API wrappers and utility functions.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libawn/awn-vfs.h&gt;


typedef             <link linkend="AwnVfsMonitor">AwnVfsMonitor</link>;
enum                <link linkend="AwnVfsMonitorEvent">AwnVfsMonitorEvent</link>;
enum                <link linkend="AwnVfsMonitorType">AwnVfsMonitorType</link>;
<link linkend="void">void</link>                (<link linkend="AwnVfsMonitorFunc">*AwnVfsMonitorFunc</link>)                (<link linkend="AwnVfsMonitor">AwnVfsMonitor</link> *monitor,
                                                         <link linkend="gchar">gchar</link> *monitor_path,
                                                         <link linkend="gchar">gchar</link> *event_path,
                                                         <link linkend="AwnVfsMonitorEvent">AwnVfsMonitorEvent</link> event,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="AwnVfsMonitor">AwnVfsMonitor</link>*      <link linkend="awn-vfs-monitor-add">awn_vfs_monitor_add</link>                 (<link linkend="gchar">gchar</link> *path,
                                                         <link linkend="AwnVfsMonitorType">AwnVfsMonitorType</link> monitor_type,
                                                         <link linkend="AwnVfsMonitorFunc">AwnVfsMonitorFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="awn-vfs-monitor-emit">awn_vfs_monitor_emit</link>                (<link linkend="AwnVfsMonitor">AwnVfsMonitor</link> *monitor,
                                                         <link linkend="gchar">gchar</link> *path,
                                                         <link linkend="AwnVfsMonitorEvent">AwnVfsMonitorEvent</link> event);
<link linkend="void">void</link>                <link linkend="awn-vfs-monitor-remove">awn_vfs_monitor_remove</link>              (<link linkend="AwnVfsMonitor">AwnVfsMonitor</link> *monitor);
<link linkend="void">void</link>                <link linkend="awn-vfs-init">awn_vfs_init</link>                        (void);
<link linkend="GSList">GSList</link>*             <link linkend="awn-vfs-get-pathlist-from-string">awn_vfs_get_pathlist_from_string</link>    (<link linkend="gchar">gchar</link> *paths,
                                                         <link linkend="GError">GError</link> **err);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
Contains a file monitoring wrapper API and utility functions whose
implementations depend on the compile-time configuration.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="AwnVfsMonitor" role="typedef"/>AwnVfsMonitor</title>
<indexterm><primary>AwnVfsMonitor</primary></indexterm><para>
A wrapper structure for the VFS libraries' file/directory monitoring
structure. In the case of the GIO implementation, it is an opaque structure.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AwnVfsMonitorEvent" role="enum"/>enum AwnVfsMonitorEvent</title>
<indexterm><primary>AwnVfsMonitorEvent</primary></indexterm><programlisting>typedef enum {
	AWN_VFS_MONITOR_EVENT_CHANGED,
	AWN_VFS_MONITOR_EVENT_CREATED,
	AWN_VFS_MONITOR_EVENT_DELETED
} AwnVfsMonitorEvent;
</programlisting>
<para>
A list of valid monitor event types for use with monitor event emission or
retrieving the type of monitor event in the callback.  Due to thunar-vfs's
limited support for event types, only "changed", "created", and "deleted"
are available for use.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="AWN-VFS-MONITOR-EVENT-CHANGED:CAPS" role="constant"/><literal>AWN_VFS_MONITOR_EVENT_CHANGED</literal></term>
<listitem><simpara> Indicates that the path referenced has
been changed.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="AWN-VFS-MONITOR-EVENT-CREATED:CAPS" role="constant"/><literal>AWN_VFS_MONITOR_EVENT_CREATED</literal></term>
<listitem><simpara> Indicates that the path referenced has
been created on the filesystem.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="AWN-VFS-MONITOR-EVENT-DELETED:CAPS" role="constant"/><literal>AWN_VFS_MONITOR_EVENT_DELETED</literal></term>
<listitem><simpara> Indicates that the path referenced has
been removed from the filesystem.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AwnVfsMonitorType" role="enum"/>enum AwnVfsMonitorType</title>
<indexterm><primary>AwnVfsMonitorType</primary></indexterm><programlisting>typedef enum {
	AWN_VFS_MONITOR_FILE,
	AWN_VFS_MONITOR_DIRECTORY
} AwnVfsMonitorType;
</programlisting>
<para>
The type of path that an <link linkend="AwnVfsMonitor"><type>AwnVfsMonitor</type></link> instance is monitoring.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="AWN-VFS-MONITOR-FILE:CAPS" role="constant"/><literal>AWN_VFS_MONITOR_FILE</literal></term>
<listitem><simpara> Indicates that the <link linkend="AwnVfsMonitor"><type>AwnVfsMonitor</type></link> instance is
monitoring a file.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="AWN-VFS-MONITOR-DIRECTORY:CAPS" role="constant"/><literal>AWN_VFS_MONITOR_DIRECTORY</literal></term>
<listitem><simpara> Indicates that the <link linkend="AwnVfsMonitor"><type>AwnVfsMonitor</type></link> instance is
monitoring a directory.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AwnVfsMonitorFunc" role="function"/>AwnVfsMonitorFunc ()</title>
<indexterm><primary>AwnVfsMonitorFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*AwnVfsMonitorFunc)                (<link linkend="AwnVfsMonitor">AwnVfsMonitor</link> *monitor,
                                                         <link linkend="gchar">gchar</link> *monitor_path,
                                                         <link linkend="gchar">gchar</link> *event_path,
                                                         <link linkend="AwnVfsMonitorEvent">AwnVfsMonitorEvent</link> event,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The function template used for callbacks executed when a filesystem event has
occurred on a path that is being monitored.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>monitor</parameter>&nbsp;:</term>
<listitem><simpara> The monitor structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>monitor_path</parameter>&nbsp;:</term>
<listitem><simpara> The path that is associated with the monitor structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event_path</parameter>&nbsp;:</term>
<listitem><simpara> In the case of a directory monitor, the path inside the folder
that triggered the event.  Otherwise, it is the same as the <parameter>monitor_path</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> The filesystem operation that triggered the callback to be executed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> The data passed to <link linkend="awn-vfs-monitor-add"><function>awn_vfs_monitor_add()</function></link> so that it could be used
in the callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-vfs-monitor-add" role="function"/>awn_vfs_monitor_add ()</title>
<indexterm><primary>awn_vfs_monitor_add</primary></indexterm><programlisting><link linkend="AwnVfsMonitor">AwnVfsMonitor</link>*      awn_vfs_monitor_add                 (<link linkend="gchar">gchar</link> *path,
                                                         <link linkend="AwnVfsMonitorType">AwnVfsMonitorType</link> monitor_type,
                                                         <link linkend="AwnVfsMonitorFunc">AwnVfsMonitorFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Adds a monitor callback to the list of callbacks associated with a file
or directory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> The path to the file/directory being monitored.  The path does not
have to exist on the filesystem at the time this function is called.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>monitor_type</parameter>&nbsp;:</term>
<listitem><simpara> States whether the path being monitored is a directory or
a file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> The function to be executed when an event occurs with regards
to the path.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Extra data to be used by the <parameter>callback</parameter> function.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a reference to a newly created monitor struct.  The caller is
obligated to free the memory when the struct is no longer needed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-vfs-monitor-emit" role="function"/>awn_vfs_monitor_emit ()</title>
<indexterm><primary>awn_vfs_monitor_emit</primary></indexterm><programlisting><link linkend="void">void</link>                awn_vfs_monitor_emit                (<link linkend="AwnVfsMonitor">AwnVfsMonitor</link> *monitor,
                                                         <link linkend="gchar">gchar</link> *path,
                                                         <link linkend="AwnVfsMonitorEvent">AwnVfsMonitorEvent</link> event);</programlisting>
<para>
Emits an artificial monitor event to a monitor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>monitor</parameter>&nbsp;:</term>
<listitem><simpara> The monitor structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> The path on the filesystem that will be passed to the
respective callbacks.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> The type of monitor event to fake.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-vfs-monitor-remove" role="function"/>awn_vfs_monitor_remove ()</title>
<indexterm><primary>awn_vfs_monitor_remove</primary></indexterm><programlisting><link linkend="void">void</link>                awn_vfs_monitor_remove              (<link linkend="AwnVfsMonitor">AwnVfsMonitor</link> *monitor);</programlisting>
<para>
Removes a monitor structure from monitoring a path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>monitor</parameter>&nbsp;:</term>
<listitem><simpara> The structure to remove from monitoring  a path.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-vfs-init" role="function"/>awn_vfs_init ()</title>
<indexterm><primary>awn_vfs_init</primary></indexterm><programlisting><link linkend="void">void</link>                awn_vfs_init                        (void);</programlisting>
<para>
Starts up the VFS library routines that Awn uses, if necessary.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="awn-vfs-get-pathlist-from-string" role="function"/>awn_vfs_get_pathlist_from_string ()</title>
<indexterm><primary>awn_vfs_get_pathlist_from_string</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*             awn_vfs_get_pathlist_from_string    (<link linkend="gchar">gchar</link> *paths,
                                                         <link linkend="GError">GError</link> **err);</programlisting>
<para>
Converts a string of type text/uri-list into a GSList of URIs.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>paths</parameter>&nbsp;:</term>
<listitem><simpara> A list of strings in a text/uri-list format
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to the reference object that is used to determine whether
the operation was successful.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a list of URIs
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
