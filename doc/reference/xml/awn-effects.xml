<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libawn-awn-effects">
<refmeta>
<refentrytitle role="top_of_page">awn-effects</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBAWN Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>awn-effects</refname>
<refpurpose></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



enum                <link linkend="AwnEffect">AwnEffect</link>;
enum                <link linkend="AwnEffectSequence">AwnEffectSequence</link>;
const <link linkend="gchar">gchar</link>*        (<link linkend="AwnTitleCallback">*AwnTitleCallback</link>)                 (<link linkend="GObject">GObject</link> *);
<link linkend="void">void</link>                (<link linkend="AwnEventNotify">*AwnEventNotify</link>)                   (<link linkend="GObject">GObject</link> *);
                    <link linkend="AwnEffects">AwnEffects</link>;
<link linkend="void">void</link>                <link linkend="awn-effects-init">awn_effects_init</link>                    (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="AwnEffects">AwnEffects</link> *fx);
<link linkend="void">void</link>                <link linkend="awn-effects-finalize">awn_effects_finalize</link>                (<link linkend="AwnEffects">AwnEffects</link> *fx);
<link linkend="void">void</link>                <link linkend="awn-register-effects">awn_register_effects</link>                (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="AwnEffects">AwnEffects</link> *fx);
<link linkend="void">void</link>                <link linkend="awn-unregister-effects">awn_unregister_effects</link>              (<link linkend="AwnEffects">AwnEffects</link> *fx);
<link linkend="void">void</link>                <link linkend="awn-effect-start">awn_effect_start</link>                    (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         const <link linkend="AwnEffect">AwnEffect</link> effect);
<link linkend="void">void</link>                <link linkend="awn-effect-stop">awn_effect_stop</link>                     (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         const <link linkend="AwnEffect">AwnEffect</link> effect);
<link linkend="void">void</link>                <link linkend="awn-effects-set-title">awn_effects_set_title</link>               (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         <link linkend="AwnTitle">AwnTitle</link> *title,
                                                         <link linkend="AwnTitleCallback">AwnTitleCallback</link> title_func);
<link linkend="void">void</link>                <link linkend="awn-effect-start-ex">awn_effect_start_ex</link>                 (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         const <link linkend="AwnEffect">AwnEffect</link> effect,
                                                         <link linkend="AwnEventNotify">AwnEventNotify</link> start,
                                                         <link linkend="AwnEventNotify">AwnEventNotify</link> stop,
                                                         <link linkend="gint">gint</link> max_loops);
<link linkend="void">void</link>                <link linkend="awn-draw-background">awn_draw_background</link>                 (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         <link linkend="cairo-t">cairo_t</link> *);
<link linkend="void">void</link>                <link linkend="awn-draw-icons">awn_draw_icons</link>                      (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         <link linkend="cairo-t">cairo_t</link> *,
                                                         <link linkend="GdkPixbuf">GdkPixbuf</link> *,
                                                         <link linkend="GdkPixbuf">GdkPixbuf</link> *);
<link linkend="void">void</link>                <link linkend="awn-draw-foreground">awn_draw_foreground</link>                 (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         <link linkend="cairo-t">cairo_t</link> *);
<link linkend="void">void</link>                <link linkend="awn-draw-set-window-size">awn_draw_set_window_size</link>            (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         const <link linkend="gint">gint</link> ,
                                                         const <link linkend="gint">gint</link> );
<link linkend="void">void</link>                <link linkend="awn-draw-set-icon-size">awn_draw_set_icon_size</link>              (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         const <link linkend="gint">gint</link> ,
                                                         const <link linkend="gint">gint</link> );
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="AwnEffect" role="enum"/>enum AwnEffect</title>
<indexterm><primary>AwnEffect</primary></indexterm><programlisting>typedef enum {
	AWN_EFFECT_NONE,
	AWN_EFFECT_OPENING,
	AWN_EFFECT_LAUNCHING,
	AWN_EFFECT_HOVER,
	AWN_EFFECT_ATTENTION,
	AWN_EFFECT_CLOSING,
	AWN_EFFECT_DESATURATE
} AwnEffect;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AwnEffectSequence" role="enum"/>enum AwnEffectSequence</title>
<indexterm><primary>AwnEffectSequence</primary></indexterm><programlisting>typedef enum {
	AWN_EFFECT_DIR_NONE,
	AWN_EFFECT_DIR_STOP,
	AWN_EFFECT_DIR_DOWN,
	AWN_EFFECT_DIR_UP,
	AWN_EFFECT_DIR_LEFT,
	AWN_EFFECT_DIR_RIGHT,
	AWN_EFFECT_SQUISH_DOWN,
	AWN_EFFECT_SQUISH_DOWN2,
	AWN_EFFECT_SQUISH_UP,
	AWN_EFFECT_SQUISH_UP2,
	AWN_EFFECT_TURN_1,
	AWN_EFFECT_TURN_2,
	AWN_EFFECT_TURN_3,
	AWN_EFFECT_TURN_4,
	AWN_EFFECT_SPOTLIGHT_ON,
	AWN_EFFECT_SPOTLIGHT_TREMBLE_UP,
	AWN_EFFECT_SPOTLIGHT_TREMBLE_DOWN,
	AWN_EFFECT_SPOTLIGHT_OFF
} AwnEffectSequence;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AwnTitleCallback" role="function"/>AwnTitleCallback ()</title>
<indexterm><primary>AwnTitleCallback</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        (*AwnTitleCallback)                 (<link linkend="GObject">GObject</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AwnEventNotify" role="function"/>AwnEventNotify ()</title>
<indexterm><primary>AwnEventNotify</primary></indexterm><programlisting><link linkend="void">void</link>                (*AwnEventNotify)                   (<link linkend="GObject">GObject</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AwnEffects" role="struct"/>AwnEffects</title>
<indexterm><primary>AwnEffects</primary></indexterm><programlisting>typedef struct {
	GObject *self;
	GtkWidget *focus_window;
	AwnSettings *settings;
	AwnTitle *title;
	AwnTitleCallback get_title;
	GList *effect_queue;

	gint icon_width, icon_height;
	gint window_width, window_height;

	/* EFFECT VARIABLES */
	gboolean effect_lock;
	AwnEffect current_effect;
	AwnEffectSequence direction;
	gint count;

	gdouble x_offset;
	gdouble y_offset;
	gdouble curve_offset;

	gint delta_width;
	gint delta_height;

	GtkAllocation clip_region;

	gdouble rotate_degrees;
	gfloat alpha;
	gfloat spotlight_alpha;
	gfloat saturation;
	gfloat glow_amount;

	gint icon_depth;
	gint icon_depth_direction;

	/* State variables */
	gboolean hover;
	gboolean clip;
	gboolean flip;
	gboolean spotlight;

	guint enter_notify;
	guint leave_notify;
	guint timer_id;

	/* padding so we dont break ABI compability every time */
	void *pad1;
	void *pad2;
	void *pad3;
	void *pad4;
} AwnEffects;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="awn-effects-init" role="function"/>awn_effects_init ()</title>
<indexterm><primary>awn_effects_init</primary></indexterm><programlisting><link linkend="void">void</link>                awn_effects_init                    (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="AwnEffects">AwnEffects</link> *fx);</programlisting>
<para>
Initializes <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> Object which will be passed to all callback functions, this object is
also passed to <link linkend="gtk-widget-queue-draw"><function>gtk_widget_queue_draw()</function></link> during the animation.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-effects-finalize" role="function"/>awn_effects_finalize ()</title>
<indexterm><primary>awn_effects_finalize</primary></indexterm><programlisting><link linkend="void">void</link>                awn_effects_finalize                (<link linkend="AwnEffects">AwnEffects</link> *fx);</programlisting>
<para>
Finalizes <link linkend="AwnEffects"><type>AwnEffects</type></link> usage and frees internally allocated memory.
(also calls <link linkend="awn-unregister-effects"><function>awn_unregister_effects()</function></link>)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-register-effects" role="function"/>awn_register_effects ()</title>
<indexterm><primary>awn_register_effects</primary></indexterm><programlisting><link linkend="void">void</link>                awn_register_effects                (<link linkend="GObject">GObject</link> *obj,
                                                         <link linkend="AwnEffects">AwnEffects</link> *fx);</programlisting>
<para>
Registers <link linkend="GtkWidget-enter-notify-event"><type>GtkWidget::enter-notify-event</type></link> and <link linkend="GtkWidget-leave-notify-event"><type>GtkWidget::leave-notify-event</type></link>
signals for the managed window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara> Managed window to which the effects will apply.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-unregister-effects" role="function"/>awn_unregister_effects ()</title>
<indexterm><primary>awn_unregister_effects</primary></indexterm><programlisting><link linkend="void">void</link>                awn_unregister_effects              (<link linkend="AwnEffects">AwnEffects</link> *fx);</programlisting>
<para>
Unregisters events for managed window.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-effect-start" role="function"/>awn_effect_start ()</title>
<indexterm><primary>awn_effect_start</primary></indexterm><programlisting><link linkend="void">void</link>                awn_effect_start                    (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         const <link linkend="AwnEffect">AwnEffect</link> effect);</programlisting>
<para>
Start a single effect. The effect will loop until <link linkend="awn-effect-stop"><function>awn_effect_stop()</function></link>
is called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>effect</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="AwnEffect"><type>AwnEffect</type></link> to schedule.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-effect-stop" role="function"/>awn_effect_stop ()</title>
<indexterm><primary>awn_effect_stop</primary></indexterm><programlisting><link linkend="void">void</link>                awn_effect_stop                     (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         const <link linkend="AwnEffect">AwnEffect</link> effect);</programlisting>
<para>
Stop a single effect.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>effect</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="AwnEffect"><type>AwnEffect</type></link> to stop.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-effects-set-title" role="function"/>awn_effects_set_title ()</title>
<indexterm><primary>awn_effects_set_title</primary></indexterm><programlisting><link linkend="void">void</link>                awn_effects_set_title               (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         <link linkend="AwnTitle">AwnTitle</link> *title,
                                                         <link linkend="AwnTitleCallback">AwnTitleCallback</link> title_func);</programlisting>
<para>
Makes <link linkend="AwnTitle"><type>AwnTitle</type></link> appear on <link linkend="GtkWidget-enter-notify-event"><type>GtkWidget::enter-notify-event</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>title</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnTitle"><type>AwnTitle</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>title_func</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to function which returns desired title text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-effect-start-ex" role="function"/>awn_effect_start_ex ()</title>
<indexterm><primary>awn_effect_start_ex</primary></indexterm><programlisting><link linkend="void">void</link>                awn_effect_start_ex                 (<link linkend="AwnEffects">AwnEffects</link> *fx,
                                                         const <link linkend="AwnEffect">AwnEffect</link> effect,
                                                         <link linkend="AwnEventNotify">AwnEventNotify</link> start,
                                                         <link linkend="AwnEventNotify">AwnEventNotify</link> stop,
                                                         <link linkend="gint">gint</link> max_loops);</programlisting>
<para>
Extended effect start, which provides callbacks for animation start, end and
possibility to specify maximum number of loops.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fx</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to <link linkend="AwnEffects"><type>AwnEffects</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>effect</parameter>&nbsp;:</term>
<listitem><simpara> Effect to schedule.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara> Function which will be called when animation starts.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stop</parameter>&nbsp;:</term>
<listitem><simpara> Function which will be called when animation finishes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_loops</parameter>&nbsp;:</term>
<listitem><simpara> Number of maximum animation loops (0 for unlimited).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-draw-background" role="function"/>awn_draw_background ()</title>
<indexterm><primary>awn_draw_background</primary></indexterm><programlisting><link linkend="void">void</link>                awn_draw_background                 (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         <link linkend="cairo-t">cairo_t</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-draw-icons" role="function"/>awn_draw_icons ()</title>
<indexterm><primary>awn_draw_icons</primary></indexterm><programlisting><link linkend="void">void</link>                awn_draw_icons                      (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         <link linkend="cairo-t">cairo_t</link> *,
                                                         <link linkend="GdkPixbuf">GdkPixbuf</link> *,
                                                         <link linkend="GdkPixbuf">GdkPixbuf</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param4</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-draw-foreground" role="function"/>awn_draw_foreground ()</title>
<indexterm><primary>awn_draw_foreground</primary></indexterm><programlisting><link linkend="void">void</link>                awn_draw_foreground                 (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         <link linkend="cairo-t">cairo_t</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-draw-set-window-size" role="function"/>awn_draw_set_window_size ()</title>
<indexterm><primary>awn_draw_set_window_size</primary></indexterm><programlisting><link linkend="void">void</link>                awn_draw_set_window_size            (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         const <link linkend="gint">gint</link> ,
                                                         const <link linkend="gint">gint</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="awn-draw-set-icon-size" role="function"/>awn_draw_set_icon_size ()</title>
<indexterm><primary>awn_draw_set_icon_size</primary></indexterm><programlisting><link linkend="void">void</link>                awn_draw_set_icon_size              (<link linkend="AwnEffects">AwnEffects</link> *,
                                                         const <link linkend="gint">gint</link> ,
                                                         const <link linkend="gint">gint</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
